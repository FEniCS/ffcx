# This workflow will install Python dependencies, run tests and lint
# with a single version of Python For more information see:
# https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: FFCx CI

on:
  push:
    branches:
      - "**"
    tags:
      - "v*"
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        python-version: [3.7, 3.8, 3.9]

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Checkout Basix
        uses: actions/checkout@v2
        with:
          path: ./basix
          repository: FEniCS/basix
          ref: v0.2.0

      - name: Checkout UFL
        uses: actions/checkout@v2
        with:
          path: ./ufl
          repository: FEniCS/ufl
          ref: main

      - name: Install dependencies (non-Python, Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get install -y graphviz libgraphviz-dev ninja-build pkg-config

      - name: Install dependencies (non-Python, macOS)
        if: runner.os == 'macOS'
        run: brew install graphviz ninja pkg-config

      - name: Install dependencies (Python)
        run: |
          python3 -m pip install --upgrade pip
          cmake -G Ninja -DCMAKE_BUILD_TYPE=Developer -B build-dir -S ./basix
          cmake --build build-dir
          sudo cmake --install build-dir
          python3 -m pip install ./basix/python
          rm -rf basix
          python3 -m pip install pygraphviz
          python3 -m pip install ./ufl

      - name: Lint with flake8
        run: |
          python3 -m pip install flake8
          flake8 --statistics ffcx/ test/

      - name: Check documentation style
        run: |
          python3 -m pip install pydocstyle
          pydocstyle .

      - name: Install ffcx
        run: |
          python3 -m pip install .

      - name: Run units tests
        run: |
          python3 -m pip install coveralls coverage pytest pytest-cov pytest-xdist sympy
          pytest -n auto --cov=ffcx/ --junitxml=junit/test-results-${{ matrix.os }}-${{ matrix.python-version }}.xml test/

      - name: Upload to Coveralls
        if: ${{ github.repository == 'FEniCS/ffcx' && github.head_ref == '' && matrix.os == 'ubuntu-latest' && matrix.python-version == '3.8' }}
        env:
          COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_REPO_TOKEN }}
        run: |
          coveralls

      - name: Upload pytest test results
        uses: actions/upload-artifact@main
        with:
          name: pytest-results-${{ matrix.os }}-${{ matrix.python-version }}
          path: junit/test-results-${{ matrix.os }}-${{ matrix.python-version }}.xml
        # Use always() to always run this step to publish test results
        # when there are test failures
        if: always()

      - name: Runs demos
        run: |
          python${{ matrix.python-version }} -m pytest demo/test_demos.py

      - name: Build documentation
        run: |
          python3 -m pip install sphinx sphinx_rtd_theme
          cd doc
          make html

      - name: Upload documentation artifact
        uses: actions/upload-artifact@v2
        with:
          name: doc-${{ matrix.os }}-${{ matrix.python-version }}
          path: doc/build/html/
          retention-days: 2
          if-no-files-found: error

      - name: Checkout FEniCS/docs
        if: ${{ github.repository == 'FEniCS/ffcx' && ( github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v') ) && runner.os == 'Linux' && matrix.python-version == 3.8 }}
        uses: actions/checkout@v2
        with:
          repository: "FEniCS/docs"
          path: "docs"
          ssh-key: "${{ secrets.SSH_GITHUB_DOCS_PRIVATE_KEY }}"
      - name: Set version name
        if: ${{ github.repository == 'FEniCS/ffcx' && ( github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v') ) && runner.os == 'Linux' && matrix.python-version == 3.8 }}
        run: |
          echo "VERSION_NAME=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
      - name: Copy documentation into repository
        if: ${{ github.repository == 'FEniCS/ffcx' && ( github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v') ) && runner.os == 'Linux' && matrix.python-version == 3.8 }}
        run: |
          cd docs
          git rm -r --ignore-unmatch ffcx/${{ env.VERSION_NAME }}
          mkdir -p ffcx/${{ env.VERSION_NAME }}
          cp -r ../doc/build/html/* ffcx/${{ env.VERSION_NAME }}
      - name: Commit and push documentation to FEniCS/docs
        if: ${{ github.repository == 'FEniCS/ffcx' && ( github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v') ) && runner.os == 'Linux' && matrix.python-version == 3.8 }}
        run: |
          cd docs
          git config --global user.email "fenics@github.com"
          git config --global user.name "FEniCS GitHub Actions"
          git add --all
          git commit --allow-empty -m "Python FEniCS/ffcx@${{ github.sha }}"
          git push
